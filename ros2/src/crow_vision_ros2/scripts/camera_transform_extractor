#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Aug  6 13:23:16 2021

@author: syxtreme
"""

import argparse
import numpy as np
import re
import os
import transforms3d as tf3
from ament_index_python import get_package_share_directory


def get_transform(buff, serial, input_in_mm=True):
    tf_mat = np.float64(buff).reshape(4, 4)
    if True:
        tf_mat[:3, 3] /= 1000
    return {
        "serial": serial,
        "tf_mat": tf_mat
        }

def main():
    INPUT_IN_MILIMETERS = True
    APPLY_INVERT = True
    base_src_folder = get_package_share_directory('crow_vision_ros2')

    input_data = os.path.join(base_src_folder, "config", "calibration_input.txt")
    output_filename = os.path.join(base_src_folder, "config", "camera_transformation_data.yaml")

    if "txt" in input_data:
        with open(input_data, "r") as f:
            lines = [l.strip() for l in f.readlines()]
    else:
        lines = input_data.split('\n')

    transforms = []
    buff = []
    current_serial = ''
    n_lines = len(lines)
    for i, l in enumerate(lines):
        try:
            if re.match(r"^\s*$", l, re.MULTILINE) is None:
                if "global_2_robot" in l:
                    current_serial = "global_2_robot"
                serial_match = re.match(r"^(\d+)\s*:\s*$", l)
                if serial_match is not None:
                    current_serial = serial_match.group(1)
                else:
                    number_match = re.match(r"^\s*([\d\.e\-\+,\s]+)\s*$", l)
                    if number_match is not None:
                        numbers = re.findall("[\d\.\+\-e]+", number_match.group(1))
                        if len(numbers) != 4:
                            raise Exception(f"Error in number of elements of a matrix at line {i}. Was {len(numbers)}, expected 4.")
                        buff += numbers
            else:
                if len(buff) != 16:
                    print(buff)
                    raise Exception(f"The collected matrix does not have the currect number of elements! It has {len(buff)}, expected 16. (at line {i})")
                if current_serial == '':
                    raise Exception(f"No serial detected! (at line {i})")
                transforms.append(get_transform(buff, current_serial, INPUT_IN_MILIMETERS))
                # reset variables
                buff = []
                current_serial = ''
        except BaseException as e:
            print(i, ": ", e)
            buff = []
            current_serial = ''

    transforms.append(get_transform(buff,current_serial, INPUT_IN_MILIMETERS))

    with open(output_filename, "w") as f:
        for i, tf in enumerate(transforms):
            serial = tf['serial']
            tf_mat = tf["tf_mat"]
            # print("*********")
            # print(tf_mat)
            # print("*********")
            # print(np.linalg.inv(tf_mat))
            # print("*********")
            if APPLY_INVERT and 'global' not in serial:
                tf_mat = np.linalg.inv(tf_mat)
                print("inverting")
            t, r, _, _ = tf3.affines.decompose(tf_mat)
            wrong_quat = tf3.quaternions.mat2quat(r).tolist()
            quat = wrong_quat[1:] + wrong_quat[:1]

            f.write(f"'{serial}': {' '.join(t.astype(str).tolist())} {' '.join([str(q) for q in quat])}\n")
            print(f"Appending camera transform:\n'{serial}': {' '.join(t.astype(str).tolist())} {' '.join([str(q) for q in quat])}\n")

    print(f"All done. Written {len(transforms)} transformations\nfrom {input_data}\nto {output_filename}")


if __name__ == "__main__":
    main()